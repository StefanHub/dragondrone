;;
;; newLISP Simple AR.Drone control
;;

(load "ncurses.lsp")
(load "drone.lsp")

;; loops internally until end of game
(define (drone-control)
	(while (!= (let (ch (get-key)) (process-key ch)) key-tab)))

(set 'speed 0.1)

(define (process-key key)
;	(println "process")
	(cond
		((= key key-up)
			(println "key up - tilt front")
			(drone-tilt-front speed))
		((= key key-down)
			(println "key down tilt back")
			(drone-tilt-back speed))
		((= key key-left)
			(println "key left - tilt left")
			(drone-tilt-left speed))
		((= key key-right)
			(println "key right - tilt right")
			(drone-tilt-right speed))
		((= key fn-key-up)
			(println "fn key up - up")
			(drone-up speed))
		((= key fn-key-down)
			(println "fn key down - down")
			(drone-down speed))
		((= key fn-key-left)
			(println "fn key left - spin left")
			(drone-spin-left speed))
		((= key fn-key-right)
			(println "fn key right - spin right")
			(drone-spin-right speed))
		((range? key key-0 key-9)
			(set 'speed (div (sub key key-0) 10))
			(println "speed " speed))
		((range? key key-a key-z)
			(letn ((an-ind (sub key key-a)) (anim (safe-nth an-ind led-anims)))
				(println "led animations: " anim)
				(drone-leds anim 2.0 5)))
		((range? key key-A key-Z)
			(letn ((flight-ind (sub key key-A)) (anim (safe-nth flight-ind flight-anims)))
				(println "flight animations: " anim)
				(drone-anim anim 5)))
		((= key key-space)
			(println "hover")
			(drone-hover))
		((= key key-lt)
			(println "take-off")
			(drone-init)
			(drone-take-off))
		((= key key-gt)
			(println "land")
			(drone-land)
			(drone-stop))
		((= key key-cr)
			(println "emergency")
			(drone-emergency))
		((= key key-backspace)
			(println "reset watchdog")
			(drone-reset-wdg))
		((= key key-tab)
			(println "bye"))
		((println "undefined key: " key)))
	key)

(define (range? v lo hi)
	(and (>= v lo) (<= v hi)))

(define (safe-nth ind li)
	 (nth (max (min ind (sub (length li) 1)) 0) li))

(s-log "drone control loaded")
